/*
 * io.h -- switch and button module interface
 *
 */

#include <stdio.h>			/* printf for errors */
#include <stdbool.h>
#include <xgpio.h>		  	/* axi gpio */
#include "xparameters.h"  	/* constants used by the hardware */
#include "xil_types.h"		/* types used by xilinx */
#include "io.h"
#include "gic.h"		/* interrupt controller interface */


#define CHANNEL1 1
#define INPUT 1

/* hidden private state */
static XGpio btnport;	       /* btn GPIO port instance */
static XGpio swport;		   /* sw GPIO port instance */
static void (*saved_btn_callback)(u32 btn);
static void (*saved_sw_callback)(u32 btn);
static bool pushed_down = TRUE;

/*
 * controll is passed to this function when a button is pushed
 *
 * devicep -- ptr to the device that caused the interrupt
 */
void btn_handler(void *devicep) {
	/* coerce the generic pointer into a gpio */
	XGpio *dev = (XGpio*)devicep;
	u32 hex_button;
	if(pushed_down){
		printf(".");
		fflush(stdout);
		pushed_down = FALSE;
		hex_button = XGpio_DiscreteRead(dev, CHANNEL1); // btn 0: 1, btn 1: 2, btn 2: 4, btn 3: 8
		switch(hex_button){
			case 1:
				saved_btn_callback(0);
				break;
			case 2:
				saved_btn_callback(1);
				break;
			case 4:
				saved_btn_callback(2);
				break;
			case 8:
				saved_btn_callback(3);
				break;
		}
	}
	else {
		pushed_down = TRUE;
	}
	XGpio_InterruptClear(dev, 1);
}

void sw_handler(void *devicep){

}

/*
 * initialize the btns providing a callback
 */
void io_btn_init(void (*btn_callback)(u32 btn)){

	saved_btn_callback = btn_callback;

	/* initialize btnport (c.f. module 1) and immediately disable interrupts (on channel and globally)*/
	XGpio_Initialize(&btnport, XPAR_AXI_GPIO_1_DEVICE_ID);	/* initialize device AXI_GPIO_1 for buttons */
	XGpio_InterruptDisable(&btnport, 1); //1 correct?
	XGpio_InterruptGlobalDisable(&btnport);
	XGpio_SetDataDirection(&btnport, CHANNEL1, INPUT);	    /* set tristate buffer to input */

	/* connect handler to the gic (c.f. gic.h) */
	gic_connect(XPAR_FABRIC_GPIO_1_VEC_ID, btn_handler, &btnport);

	/* enable interrupts on channel (c.f. table 2.1)  */
	XGpio_InterruptEnable(&btnport, 1); //1 correct?

	/* enable interrupt to processor (c.f. table 2.1) */
	XGpio_InterruptGlobalEnable(&btnport);

}

/*
 * close the btns
 */
void io_btn_close(void) {

	/* disconnect the interrupts (c.f. gic.h) */
	gic_disconnect(XPAR_FABRIC_GPIO_1_VEC_ID);

	/* close the gic (c.f. gic.h) */
	gic_close();

}

/*
 * initialize the switches providing a callback
 */
void io_sw_init(void (*sw_callback)(u32 sw)) {

	saved_sw_callback = sw_callback;

	/* initialize btnport (c.f. module 1) and immediately disable interrupts (on channel and globally)*/
	XGpio_Initialize(&swport, XPAR_AXI_GPIO_2_DEVICE_ID);	/* initialize device AXI_GPIO_1 for buttons */
	XGpio_InterruptDisable(&swport, 1);
	XGpio_InterruptGlobalDisable(&swport);
	XGpio_SetDataDirection(&swport, CHANNEL1, INPUT);	    /* set tristate buffer to input */

	/* connect handler to the gic (c.f. gic.h) */
	gic_connect(XPAR_FABRIC_GPIO_2_VEC_ID, sw_handler, &swport);

	/* enable interrupts on channel (c.f. table 2.1)  */
	XGpio_InterruptEnable(&swport, 1); //1 correct?

	/* enable interrupt to processor (c.f. table 2.1) */
	XGpio_InterruptGlobalEnable(&swport);

}

/*
 * close the switches
 */
void io_sw_close(void);

