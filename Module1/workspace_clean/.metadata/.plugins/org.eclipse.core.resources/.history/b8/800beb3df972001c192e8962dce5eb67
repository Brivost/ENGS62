#include <stdio.h>
#include <stdlib.h>
#include "led.h"
#include "platform.h"

#define OUTPUT 0x0							/* setting GPIO direction to output */
#define CHANNEL1 1							/* channel 1 of the GPIO port */
#define LED4_pin 7								/* pin number of LED 4 (MIO7) */

static XGpio port;						/* GPIO port connected to the leds 0-3 */
static XGpio portRGB;					/* GPIO port connected to RGB LED 6 */
static XGpioPs port4;						/* GPIO PS port connected to led 4 */
static u32 LEDs_status;

/*
 * Initialize the led module
 */
void led_init(void){
	init_platform();						/* initialize the hardware platform */

	XGpio_Initialize(&port, XPAR_AXI_GPIO_0_DEVICE_ID);	/* initialize device AXI_GPIO_0 */
	XGpio_SetDataDirection(&port, CHANNEL1, OUTPUT);	    /* set tristate buffer to output */

	XGpio_Initialize(&portRGB, XPAR_AXI_GPIO_1_DEVICE_ID); /* initialize device AXI_GPIO_1 */
	XGpio_SetDataDirection(&portRGB, CHANNEL1, OUTPUT);

	XGpioPs_Config *config = XGpioPs_LookupConfig(XPAR_AXI_GPIO_0_DEVICE_ID); // creates a GpioPs config
	XGpioPs_CfgInitialize(&port4, config, config->BaseAddr); // initializes GpioPs port4
	XGpioPs_SetDirectionPin(&port4, LED4_pin, 1); //set MIO7 pin (LED 4) to output
	XGpioPs_SetOutputEnablePin(&port4, LED4_pin, 1); // set MIO7 pin to output enable
}

/*
 * Set <led> to one of {LED_ON,LED_OFF,...}
 *
 * <led> is either ALL or a number >= 0
 * Does nothing if <led> is invalid
 */
void led_set(u32 led, bool tostate){
	if (led == ALL || led >=0){
		if (led == 7 && tostate == LED_ON){
			XGpioPs_WritePin(&port4, LED4_pin, 1); // turn on led 4
		}
		else if (led == 7 && tostate == LED_OFF){
			XGpioPs_WritePin(&port4, LED4_pin, 0); // turn off led 4
		}
		else{
			LEDs_status = XGpio_DiscreteRead(&port, CHANNEL1);
			if (tostate == LED_ON){
				LEDs_status = LEDs_status | led; //switch specified LED to on status 0100 or 0001 -> 0101
			}
			else if (tostate == LED_OFF){
				led = ~led; //creating mask. 0001 -> 1110
				LEDs_status = LEDs_status & led; // switch specified LED to off status 0101 and 1110 -> 0100
			}
			XGpio_DiscreteWrite(&port, CHANNEL1, LEDs_status);
		}
	}
}

void RGB_set(){
	XGpio_DiscreteWrite(&portRGB, CHANNEL1, 7); //turn on LED6
}

/*
 * Get the status of <led>
 *
 * <led> is a number >= 0
 * returns {LED_ON,LED_OFF,...}; LED_OFF if <led> is invalid
 */
bool led_get(u32 led) {
	if (led >= 0){
		LEDs_status = XGpio_DiscreteRead(&port, CHANNEL1);
		return (LEDs_status & led); //right shift LED_status 'led' times
											//returns true if it's on,
											//returns false if it's off
	}
	return LED_OFF;
}

/*
 * Toggle <led>
 *
 * <led> is a value >= 0
 * Does nothing if <led> is invalid
 */
void led_toggle(u32 led){
	if(led >= 0){
		if(led_get(led)){ //if led is on, turn it off
			led_set(led, LED_OFF);
		}
		else{ //if led is off, turn it on
			led_set(led,LED_ON);
		}
	}
}


