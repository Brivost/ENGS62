#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include "platform.h"
#include "xil_printf.h"

#include "gic.h"
#include "led.h"
#include "io.h"
#include "servo.h"
#include "adc.h"
#include "ttc.h"
#include "wifi.h"

//#include "xuartps.h"

#define CONFIGURE 0
#define PING 1
#define UPDATE 2
#define UPDATE_FLAG 0
#define LOW 5.25
#define HIGH 10.5

#define RED 4
#define GREEN 2
#define YELLOW 6
#define BLUE 1

#define TRAFFIC 6
#define SWITCH_LIGHT 7
#define PEDESTRIAN 8
#define TRAIN 9
#define MAINTENANCE 10
#define ON 1
#define OFF 0


#define TO_RED 0
#define TO_GREEN 1
static int state;
static int previous_state;
static int switch_direction = 0;
static int timer_finished_flag = 0;
static int timer_running_flag = 0;
static int button_flag = 0;
static int timer_count = 0;
static int blue_light_status = OFF;
static int maint_switch = ON;
static int train_switch = ON;
static int train_arriving = OFF;

//XUartPs uart1;
//XUartPs uart0;
static bool done = FALSE;
//static u8 buffer;
static int mode;
//static int binary = 0;
//static int divider = 8;
//static int count = 0;
//static int requingle_value;
//static u8 bigbuffer[100];
//static int buffer_count = 0;
//static char str[100];
static double dutycycle = HIGH; // initial duty cycle
//
//typedef struct {
//	int type;
//	int id;
//} ping_t;
//
//typedef struct {
//	int type;
//	int id;
//	int value;
//} update_request_t;
//
//typedef struct {
//	int type;
//	int id;
//	int average;
//	int values[30];
//} update_response_t;
//
//static ping_t pringle;
//static ping_t *pringle_p = &pringle;
//
//static update_request_t requingle;
//static update_request_t *requingle_p = &requingle;
//
//static update_response_t respingle;
//static update_response_t *respingle_p = &respingle;

void btn_callback(u32 btn){
	printf("In btn callback\n");
	if (btn == 0){
		button_flag = 1;
	}
//	led_set(ALL,LED_OFF);
//	led_toggle(btn);
//	if (btn == 0){
//		mode = CONFIGURE;
//		printf("< allows entry to wifi cmd mode >\n");
//	}
	else if (btn == 1){
		mode = PING;
		printf("[PING]\n");
		//XUartPs_Send(&uart0, (u8 *)pringle_p, sizeof(ping_t));
	}
	else if (btn == 2){
		printf("[UPDATE]\n");
		mode = UPDATE;
		//XUartPs_Send(&uart0, (u8 *)requingle_p, sizeof(update_request_t));
	}
	else if (btn == 3){ //exit program if btn 3 is pushed
		done = TRUE;
	}
}

void sw_callback(u32 sw){
	printf("In sw callback\n");
	if (sw == 0){
		if (maint_switch == ON){
			previous_state = state;
			state = MAINTENANCE;
			maint_switch = OFF;
			servo_set(HIGH);
		}
		else {
			if (train_arriving == ON){
				state = TRAIN;
			}
			else{
				state = previous_state;
				servo_set(LOW);
			}
			maint_switch = ON;
		}
	}
	if (sw == 3){
		if (train_switch == ON){
			printf("In train mode\n");
			train_arriving = ON;
			train_switch = OFF;
		}
		else {
			train_switch = ON;
			train_arriving = OFF;
		}
	}
}

void ttc_callback(){
	printf("Timer count = %d\n", timer_count);
	if (state == TRAFFIC || state == PEDESTRIAN){
		if (timer_count < 10) {
			timer_count++;
		}
	}
	if (timer_count == 10 || (state != TRAFFIC && state != PEDESTRIAN)) {
		timer_finished_flag = 1;
		timer_count = 0;
	}
}

//// Send UART0 stuff to UART 1
//void handler_func0(void *CallBackRef, u32 Event, unsigned int EventData){
//
//	u8 byte[sizeof(ping_t)];
//	u8 update_byte[sizeof(update_response_t)];
//
//	if (mode == CONFIGURE){
//		if (Event == XUARTPS_EVENT_RECV_DATA){
//			XUartPs_Recv(&uart0, &buffer, 1);
//			XUartPs_Send(&uart1, &buffer, 1);
//		}
//	}
//	else if (mode == PING){
//		if (Event == XUARTPS_EVENT_RECV_DATA){
//			XUartPs_Recv(&uart0, &buffer, 1);
//			byte[count] = buffer;
//			if (count == 7){
//				int num = byte[4] + byte[5] + byte[6] + byte[7];
//				printf("%d\n", num);
//				count = 0;
//			}
//			else{
//				count += 1;
//			}
//		}
//	}
//	else if (mode == UPDATE){
//		if (Event == XUARTPS_EVENT_RECV_DATA){
//			XUartPs_Recv(&uart0, &buffer, 1);
//			update_byte[count] = buffer;
//			if (count == 7){
//				int id_num = update_byte[4] + update_byte[5] + update_byte[6] + update_byte[7];
//				respingle.id = id_num;
//				count += 1;
//			}
//			else if (count == 11){
//				int average_num = update_byte[8] + update_byte[9] + update_byte[10] + update_byte[11];
//				respingle.average = average_num;
//				count += 1;
//			}
//			else if (count == sizeof(update_response_t)-1){
//				count = 0;
//				printf("Update: %d %d\n", respingle.id, respingle.average);
//			}
//			else{
//				count += 1;
//			}
//		}
//	}
//}
//
//// Deals with sending to and receiving from output
//void handler_func1(void *CallBackRef, u32 Event, unsigned int EventData){
//
//	u8 newLine = (u8)'\n';
//	char number[100];
//
//	if (mode == CONFIGURE){
//		if (Event == XUARTPS_EVENT_RECV_DATA){
//			XUartPs_Recv(&uart1, &buffer, 1);
//			XUartPs_Send(&uart0, &buffer, 1);
//			if (buffer == 13){
//				XUartPs_Send(&uart1, &newLine, 1);
//			}
//		}
//	}
//	else if (mode == UPDATE){
//		if (Event == XUARTPS_EVENT_RECV_DATA){
//			XUartPs_Recv(&uart1, &buffer, 1);
////			char buffer_character = buffer;
////			if (buffer != 13){
////				str[buffer_count] = buffer_character;
////				buffer_count += 1;
////			}
////			else {
////				memcpy(number, str, buffer_count);
////				number[buffer_count] = '\0';
//
////				int request_value = atoi(number);
//			float pot = adc_get_pot()*100;
//			requingle.value = (int)pot;
//			XUartPs_Send(&uart0, (u8 *)requingle_p, sizeof(update_request_t));
//			buffer_count = 0;
////			if (request_value >= 0 && request_value <= 100){
////				dutycycle = (HIGH-LOW)*(pot/100) + LOW;
////				servo_set(dutycycle);
////			}
//
//		}
//	}
//}


int main(void) {

    init_platform();

    gic_init();

    led_init();

	/* set up interrupts & callbacks */
	io_btn_init(btn_callback);
	io_sw_init(sw_callback);

	// sets up 7.5% square waveform
	servo_init();

	// Set up ADC
	adc_init();

	// Set up wifi
	wifi_init();

//    /* configuring UART 0 */
//    XUartPs_Config *config0 = XUartPs_LookupConfig(XPAR_PS7_UART_0_DEVICE_ID);
//    XUartPs_CfgInitialize(&uart0, config0, config0->BaseAddress);
//    XUartPs_SetBaudRate(&uart0, 9600);
//    XUartPs_SetFifoThreshold(&uart0, 1);
//    XUartPs_SetInterruptMask(&uart0, XUARTPS_IXR_RXOVR);
//    XUartPs_SetHandler(&uart0, (XUartPs_Handler)handler_func0, (void*)&uart0);
//
//	/* configuring UART 1 */
//    XUartPs_Config *config1 = XUartPs_LookupConfig(XPAR_PS7_UART_1_DEVICE_ID);
//    XUartPs_CfgInitialize(&uart1, config1, config1->BaseAddress);
//    XUartPs_SetFifoThreshold(&uart1, 1);
//    XUartPs_SetInterruptMask(&uart1, XUARTPS_IXR_RXOVR);
//    XUartPs_SetHandler(&uart1, (XUartPs_Handler)handler_func1, (void*)&uart1);
//
//    gic_connect(XPAR_XUARTPS_0_INTR, (Xil_InterruptHandler)XUartPs_InterruptHandler, (void*)&uart0);
//    gic_connect(XPAR_XUARTPS_1_INTR, (Xil_InterruptHandler)XUartPs_InterruptHandler, (void*)&uart1);
//
//    // PING message
//    pringle.type = PING;
//    pringle.id = 10;
//
//    // UPDATE send message
//    requingle.type = UPDATE;
//    requingle.id = 10;
//
//    // UPDATE receive message
//    respingle.type = UPDATE;
//    respingle.id = 10;

    // Set initial state
    state = TRAFFIC;

    printf("[hello]\n");

    servo_set(LOW);

    while(!done){
    	if (state==TRAFFIC){
    		RGB_set(GREEN);
    		if (train_arriving == ON){
    			servo_set(HIGH);
    			state = TRAIN;
    			ttc_stop();
    			timer_running_flag = 0;
    			timer_finished_flag = 0;
    			button_flag = 0;
    		}
    		else if(timer_running_flag == 0){
    			printf("In traffic\n");
    			timer_running_flag = 1;
    			button_flag = 0;
    			ttc_init(1, ttc_callback);
    			ttc_start();
			}
    		else if(timer_finished_flag == 1 && button_flag == 1){
    			ttc_stop();
    			state = SWITCH_LIGHT;
    			timer_finished_flag = 0;
    			button_flag = 0;
    			timer_running_flag=0;
    			switch_direction = TO_RED;
    		}
    	}
    	else if (state==SWITCH_LIGHT){
			RGB_set(YELLOW);
    		if (train_arriving == ON){
    			servo_set(HIGH);
    			state = TRAIN;
    			ttc_stop();
    			timer_running_flag = 0;
    			timer_finished_flag = 0;
    			button_flag = 0;
    		}
    		else if(timer_running_flag == 0){
				printf("In switch light\n");
				timer_running_flag = 1;
				ttc_init(1, ttc_callback);
				ttc_start();
			}
			else if(timer_finished_flag == 1 && switch_direction == TO_RED){
				ttc_stop();
				timer_finished_flag = 0;
				state = PEDESTRIAN;
				timer_running_flag = 0;
			}
			else if(timer_finished_flag == 1 && switch_direction == TO_GREEN){
				ttc_stop();
				timer_finished_flag = 0;
				state = TRAFFIC;
				timer_running_flag = 0;
			}
    	}
    	else if (state == PEDESTRIAN){
    		RGB_set(RED);
    		if (train_arriving == ON){
    			servo_set(HIGH);
    			state = TRAIN;
    			ttc_stop();
    			timer_running_flag = 0;
    			timer_finished_flag = 0;
    			button_flag = 0;
    		}
    		else if(timer_running_flag == 0){
    			printf("In pedestrian\n");
				timer_running_flag = 1;
				ttc_init(1, ttc_callback);
				ttc_start();
			}
    		else if(timer_finished_flag == 1){
				ttc_stop();
				timer_finished_flag = 0;
				state = SWITCH_LIGHT;
				switch_direction = TO_GREEN;
				timer_running_flag = 0;
			}
    	}
    	else if (state == MAINTENANCE){
    		float pot = adc_get_pot();
    		if(timer_running_flag == 0){
    			printf("In maintenance\n");
				timer_running_flag = 1;
				ttc_init(1, ttc_callback);
				ttc_start();
	    		if (pot >= 0.5 && dutycycle <= 7.5){
	    			printf("Setting servo high\n");
	    			dutycycle = HIGH;
	    			servo_set(HIGH);
	    		}
	    		else if (pot < 0.5 && dutycycle > 7.5){
	    			printf("Setting servo low\n");
	    			dutycycle = LOW;
	    			servo_set(LOW);
	    		}
			}
    		else if(timer_finished_flag == 1){
				ttc_stop();
				timer_finished_flag = 0;
				timer_running_flag = 0;
	    		if (pot >= 0.5 && dutycycle <= 7.5){
	    			printf("Setting servo high\n");
	    			dutycycle = HIGH;
	    			servo_set(HIGH);
	    		}
	    		else if (pot < 0.5 && dutycycle > 7.5){
	    			printf("Setting servo low\n");
	    			dutycycle = LOW;
	    			servo_set(LOW);
	    		}
	    		if (blue_light_status == OFF){
	    			RGB_set(BLUE);
	    			blue_light_status = ON;
	    		}
	    		else {
	    			RGB_set(OFF);
	    			blue_light_status = OFF;
	    		}
			}
    	}
    	else if (state == TRAIN){
    		RGB_set(RED);
    		timer_count = 0;
    		if (train_arriving == OFF){
    			if (maint_switch == OFF){
    				state = MAINTENANCE;
    			}
    			else {
    				state = PEDESTRIAN;
    				servo_set(LOW);
    			}
    		}
    	}
    }
    printf("\n[done]\n");
    sleep(1);

	led_set(ALL, LED_OFF); // turns LED's 0,1,2,3,4 off
	rgb_set(OFF);

//    XUartPs_DisableUart(&uart1);

    io_btn_close();
    io_sw_close();
    ttc_close();

    //gic_disconnect(XPAR_XUARTPS_1_INTR);
    wifi_close();

    gic_close();


    cleanup_platform();
    return 0;
}
