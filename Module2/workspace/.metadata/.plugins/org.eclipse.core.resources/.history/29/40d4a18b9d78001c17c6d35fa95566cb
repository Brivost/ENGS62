/*
 * blinky.c -- working with Serial I/O and GPIO
 *
 * Assumes the LED's are connected to AXI_GPIO_0, on channel 1
 *
 * Terminal Settings:
 *  -Baud: 115200
 *  -Data bits: 8
 *  -Parity: no
 *  -Stop bits: 1
 */
#include <stdio.h>						/* printf(), getchar() */
#include <stdlib.h>
#include <stdbool.h>
#include <unistd.h>
#include <string.h>						/* strcmp() */

#include "xil_types.h"					/* u32, u16 etc */
#include "platform.h"					/* ZYBOboard interface */
#include "xparameters.h"				/* constants used by the hardware */

#include "xgpio.h"
#include "led.h"
#include "gic.h"
#include "io.h"

void led_callback(u32 btn){
	led_toggle(btn);
}

//void sw_callback(u32 btn){
//	led_toggle(btn);
//}

/* Prompts for a single character from
 * stdout and then prints that character.
 * returns 1 after newline
 * returns 0 after q
 */
int get_input(){
	printf(">");

	int c = getchar();
	int initial_char = c;
	int charcount = 0; //records number of characters entered

	while (c != 13){ //check for return (ascii code 13)
		printf("%c", c);
		c = getchar();
		if (c != 127){ //discard delete key entries
			charcount++; //increment character count
		}
	}

	if(initial_char == 'q' && charcount == 1){
		return -1;
	}
	if (initial_char == '0' && charcount == 1){ // toggle LED 0 if input is 0
		printf("\n[%c ",initial_char);
		return 0; // 0001 points to LED 0
	}
	if (initial_char == '1' && charcount == 1){ // toggle LED 1 if input is 1
		printf("\n[%c ",initial_char);
		return 1; //0010 points to LED 1
	}
	if (initial_char == '2' && charcount == 1){ // toggle LED 2 if input is 2
		printf("\n[%c ",initial_char);
		return 2; //0100 points to LED 2
	}
	if (initial_char == '3' && charcount == 1){ // toggle LED 3 if input is 3
		printf("\n[%c ",initial_char);
		return 3; //1000 points to LED 3
	}
	return 5;
}


int main() {
	 /* 
	  * set stdin unbuffered, forcing getchar to return immediately when
	  * a character is typed.
      */
	 setvbuf(stdin,NULL,_IONBF,0);
	 
	 printf("[Hello]\n");

	init_platform();

	/* initialize the gic (c.f. gic.h) */
	gic_init();

	/* initialize led's 0-3 */
	 led_init();

	io_btn_init(btn_callback);
	io_sw_init(sw_callback);

	 u32 input = 1;
	 while(input != -1) {
		 input = get_input();
		 if (input != 5){ // change LED's
			 if(led_get(input)==LED_ON && input != -1){
				 printf("off]");
			 }
			 else if (led_get(input)==LED_OFF && input != -1){
				 printf("on]");
			 }
			 led_toggle(input);
		 }
		 printf("\n");
	 }

	 led_set(ALL, LED_OFF); // turns LED's 0,1,2,3 off

	 io_btn_close();
	 io_sw_close();

	 /* close the gic (c.f. gic.h) */
	 gic_close();

	 cleanup_platform();					/* cleanup the hardware platform */
	 return 0;
}
